// 8-bit CRC Model - sourcer32@gmail.com
//  Copyright (C) 1988-2020, All Rights Reserved
 
#include "CRC.h"
  
unsigned char Slow_CRC_Cal8Bits(unsigned char crc, int Size, unsigned char *Buffer)
{
  int i;
 
  while(Size--)
  {
    crc = crc ^ *Buffer++; // Apply Byte
 
    for(i=0; i<8; i++) // Eight rounds of 1-bit
    {
      if (crc & 0x80)
        crc = (crc << 1) ^ POLY;
      else
        crc = (crc << 1); // Left Shifting
    }
  }
 
  return(crc);
}
 
unsigned char Quick_CRC_Cal8Bits(unsigned char crc, int Size, unsigned char *Buffer)
{
  static const unsigned char CrcTable[] = {
    0x00,0x97,0xB9,0x2E,0xE5,0x72,0x5C,0xCB, // 0x97 Polynomial Table, 4-bit, sourcer32@gmail.com
    0x5D,0xCA,0xE4,0x73,0xB8,0x2F,0x01,0x96 };
 
 
  while(Size--)
  {
    crc = crc ^ *Buffer++; // Apply Byte
 
    crc = (crc << 4) ^ CrcTable[(crc >> 4) & 0xF]; // Two rounds of 4-bits
    crc = (crc << 4) ^ CrcTable[(crc >> 4) & 0xF];
  }
 
  return(crc);
}
 
unsigned char Fast_CRC_Cal8Bits(unsigned char crc, int Size, unsigned char *Buffer)
{
  // 0x97 Koopman = 0x2F table https://github.com/sics-sse/moped/blob/master/autosar/src/core/system/Crc/Crc_8.c
  static const unsigned char CrcTable[] = { 
    0x0, 0x2f, 0x5e, 0x71, 0xbc, 0x93, 0xe2, 0xcd,
    0x57, 0x78, 0x9, 0x26, 0xeb, 0xc4, 0xb5, 0x9a,
    0xae, 0x81, 0xf0, 0xdf, 0x12, 0x3d, 0x4c, 0x63,
    0xf9, 0xd6, 0xa7, 0x88, 0x45, 0x6a, 0x1b, 0x34,
    0x73, 0x5c, 0x2d, 0x2, 0xcf, 0xe0, 0x91, 0xbe,
    0x24, 0xb, 0x7a, 0x55, 0x98, 0xb7, 0xc6, 0xe9,
    0xdd, 0xf2, 0x83, 0xac, 0x61, 0x4e, 0x3f, 0x10,
    0x8a, 0xa5, 0xd4, 0xfb, 0x36, 0x19, 0x68, 0x47,
    0xe6, 0xc9, 0xb8, 0x97, 0x5a, 0x75, 0x4, 0x2b,
    0xb1, 0x9e, 0xef, 0xc0, 0xd, 0x22, 0x53, 0x7c,
    0x48, 0x67, 0x16, 0x39, 0xf4, 0xdb, 0xaa, 0x85,
    0x1f, 0x30, 0x41, 0x6e, 0xa3, 0x8c, 0xfd, 0xd2,
    0x95, 0xba, 0xcb, 0xe4, 0x29, 0x6, 0x77, 0x58,
    0xc2, 0xed, 0x9c, 0xb3, 0x7e, 0x51, 0x20, 0xf,
    0x3b, 0x14, 0x65, 0x4a, 0x87, 0xa8, 0xd9, 0xf6,
    0x6c, 0x43, 0x32, 0x1d, 0xd0, 0xff, 0x8e, 0xa1,
    0xe3, 0xcc, 0xbd, 0x92, 0x5f, 0x70, 0x1, 0x2e,
    0xb4, 0x9b, 0xea, 0xc5, 0x8, 0x27, 0x56, 0x79,
    0x4d, 0x62, 0x13, 0x3c, 0xf1, 0xde, 0xaf, 0x80,
    0x1a, 0x35, 0x44, 0x6b, 0xa6, 0x89, 0xf8, 0xd7,
    0x90, 0xbf, 0xce, 0xe1, 0x2c, 0x3, 0x72, 0x5d,
    0xc7, 0xe8, 0x99, 0xb6, 0x7b, 0x54, 0x25, 0xa,
    0x3e, 0x11, 0x60, 0x4f, 0x82, 0xad, 0xdc, 0xf3,
    0x69, 0x46, 0x37, 0x18, 0xd5, 0xfa, 0x8b, 0xa4,
    0x5, 0x2a, 0x5b, 0x74, 0xb9, 0x96, 0xe7, 0xc8,
    0x52, 0x7d, 0xc, 0x23, 0xee, 0xc1, 0xb0, 0x9f,
    0xab, 0x84, 0xf5, 0xda, 0x17, 0x38, 0x49, 0x66,
    0xfc, 0xd3, 0xa2, 0x8d, 0x40, 0x6f, 0x1e, 0x31,
    0x76, 0x59, 0x28, 0x7, 0xca, 0xe5, 0x94, 0xbb,
    0x21, 0xe, 0x7f, 0x50, 0x9d, 0xb2, 0xc3, 0xec,
    0xd8, 0xf7, 0x86, 0xa9, 0x64, 0x4b, 0x3a, 0x15,
    0x8f, 0xa0, 0xd1, 0xfe, 0x33, 0x1c, 0x6d, 0x42};
 
  while(Size--)
  {
    crc = crc ^ *Buffer++; // Apply Byte
 
    crc = CrcTable[crc & 0xFF]; // One round of 8-bits
  }
 
  return(crc);
}